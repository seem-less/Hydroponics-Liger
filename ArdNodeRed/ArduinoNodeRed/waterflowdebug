byte sensorInterrupt1 = 0;  // 0 = digital pin 2  FOR FIRST FLOW SENSOR
byte sensorInterrupt2 = 1;  // 1 = digital pin 3  FOR SECOND FLOW SENSOR
byte sensorPin1       = 2;
byte sensorPin2       = 3;

volatile byte pulseCount1;
volatile byte pulseCount2;

float flowRate1;
float flowRate2;
unsigned int flowMilliLitres1;
unsigned int flowMilliLitres2;
unsigned long totalMilliLitres1;
unsigned long totalMilliLitres2;

SETUP

  pinMode(sensorPin1, INPUT);
  pinMode(sensorPin2, INPUT);
  digitalWrite(sensorPin1, HIGH);
  digitalWrite(sensorPin2, HIGH);

  pulseCount1        = 0;
  pulseCount2        = 0;
  flowRate1          = 0.0;
  flowRate2          = 0.0;
  flowMilliLitres1   = 0;
  flowMilliLitres2   = 0;
  totalMilliLitres1  = 0;
  totalMilliLitres2  = 0;
  oldTime            = 0;

   attachInterrupt(sensorInterrupt1, pulseCounter1, FALLING);
   attachInterrupt(sensorInterrupt2, pulseCounter2, FALLING);

LOOP

if((millis() - oldTime) > 1000)    // Only process counters once per second
  {
    // Disable the interrupt while calculating flow rate and sending the value to
    // the host
    detachInterrupt(sensorInterrupt1);
    detachInterrupt(sensorInterrupt2);

    // Because this loop may not complete in exactly 1 second intervals we calculate
    // the number of milliseconds that have passed since the last execution and use
    // that to scale the output. We also apply the calibrationFactor to scale the output
    // based on the number of pulses per second per units of measure (litres/minute in
    // this case) coming from the sensor.
    flowRate1 = ((1000.0 / (millis() - oldTime)) * pulseCount1) / calibrationFactor;
    flowRate2 = ((1000.0 / (millis() - oldTime)) * pulseCount2) / calibrationFactor;

    // Note the time this processing pass was executed. Note that because we've
    // disabled interrupts the millis() function won't actually be incrementing right
    // at this point, but it will still return the value it was set to just before
    // interrupts went away.
    oldTime = millis();

    // Divide the flow rate in litres/minute by 60 to determine how many litres have
    // passed through the sensor in this 1 second interval, then multiply by 1000 to
    // convert to millilitres.
    flowMilliLitres1 = (flowRate1 / 60) * 1000;
    flowMilliLitres2 = (flowRate2 / 60) * 1000;

    // Add the millilitres passed in this second to the cumulative total
    totalMilliLitres1 += flowMilliLitres1;
    totalMilliLitres2 += flowMilliLitres2;

    // Print the flow rate for this second in litres / minute
//    Serial.print("Qi: ");
//    Serial.print(int(flowRate1));  // Print the integer part of the variable
//    Serial.print("L/min");
//    Serial.print("\t");       // Print tab space
  String qIn = (String)int(flowRate1);

  // Print the cumulative total of litres flowed since starting
//    Serial.print("Vi: ");
//    Serial.print(totalMilliLitres1);
//    Serial.print("mL");
//    Serial.print("\t");       // Print tab space
  String vIn = (String)totalMilliLitres1;

//    Serial.print("Qo: ");
//    Serial.print(int(flowRate2));  // Print the integer part of the variable
//    Serial.print("L/min");
//    Serial.print("\t"); // Print tab space
  String qOut = (String)int(flowRate2);

//    Serial.print("Vo: ");
//    Serial.print(totalMilliLitres2);
//    Serial.println("mL");
  String vOut = (String)totalMilliLitres2;

  // Reset the pulse counter so we can start incrementing again
      pulseCount1 = 0;
      pulseCount2 = 0;

      // Enable the interrupt again now that we've finished sending output
    attachInterrupt(sensorInterrupt1, pulseCounter1, FALLING);
    attachInterrupt(sensorInterrupt2, pulseCounter2, FALLING);

Seperate functions

void pulseCounter1()
{
  // Increment the pulse counter
  pulseCount1++;
}

void pulseCounter2()
{
  // Increment the pulse counter
  pulseCount2++;
}
